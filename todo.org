* general [0/6]
** TODO better selection of lst files in verify.sh
** TODO add catch-all for tags (with optional trace)
** TODO narrow down parseString: too general
** TODO better pretty print, please~
** TODO look at data/zen-test/... -- something we can use?
** TODO our own testing framework
* pcc [0/2]
** TODO implement INCLUDE for lst files
** TODO implement EXCLUDE for lst files
* modifications [0/2]
** TODO implement CLASS:x.FORGET
** TODO CLASS:.COPY
* restrictions [0/6]
** TODO pull out per-line restrictions into LSTLine
** TODO implement BONUS tags
- what other tags imply per-tag restrictions?
- a couple of different syntax for this, ugh
** TODO implement PRE:.CLEAR
** TODO PREFEAT is not fully implemented
** TODO PRERULE should be matching against known rules, not accepting any string
** TODO PREABILITY may not be doing the right thing (test for "Perspicacity ~ War Master")
* skill [0/4]
** TODO implement BONUS:SKILL
** TODO implement PRERULE
** TODO implement TEMPBONUS
** TODO finish up PREVAR{G,L}TEQ
** 71 failures
* weaponprof
** TODO fix remaining failures (broken when forcing per-line parsing)
* questions
** when are JEPs used?
- EVAL()
- SELECT:
- QTY:
- LOOKUP:...,
- STAT:INT=...|
- BONUS:<category>|<group>|<formula>
** how many starting pcc files are there?
* lst types [5/18]
- [X] LANGUAGE
- [X] SHIELDPROF
- [X] WEAPONPROF
- [X] ARMORPROF
- [X] SKILL
- [ ] COMPANION MODIFIER
- [ ] DEITY (block-based)
- [ ] DOMAIN
- [ ] EQUIPMENT MODIFIER
- [ ] EQUIPMENT
- [ ] SPELL
- [ ] FEAT
- [ ] RACE
- [ ] KIT (block-based)
- [ ] TEMPLATE
- [ ] CLASS (block-based)
- [ ] ABILITY
- [ ] ABILITYCATEGORY
* loading comment from pcgen-dev ml
The "load" process is - in practice - not much different than the
process used to compile software. (Preprocessing is the handling of
the PCC files and recursive calls to PCC:, compilation is handling the
.COPY, .MOD, and parsing the tokens. The symbol table is effectively
the data stored in the ReferenceContext, the other parts of the AST
are effectively the contents of ListContext and ObjectContext). Just
like a compiler has multiple passes over the internal representation,
so do we, as we have to resolve references back to the original
objects. (We effectively have 4 passes if you ignore the recursive PCC
file resolution)
