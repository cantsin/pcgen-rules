* general [0/3]
** TODO add catch-all for tags (with optional trace)
** TODO narrow down parseString*: way too general
** TODO look at data/zen-test/... -- is this something we can use?
* pcc [0/2]
** TODO implement INCLUDE for lst files
** TODO implement EXCLUDE for lst files
* modifications [0/3]
** TODO implement CLASS:x.FORGET
** TODO CLASS:.COPY
** TODO SKILL.COPY= ...
* restrictions [0/5]
** TODO pull out per-line restrictions into LSTLine
** TODO PREFEAT is not fully implemented
** TODO PRERULE should be matching against known rules, not accepting any string
** TODO PREABILITY may not be doing the right thing (test for "Perspicacity ~ War Master")
** TODO consolidate PREVAR tags
* skill [0/1]
** TODO 4 failures
- remaining failure is a bad merge, cannot fix
- Tactics.COPY 1
- ADD:FEAT 1
- AUTO:EQUIP 1
* domain
** TODO failures
- ADD:ABILITY|3|Special Ability|VIRTUAL|ArtificerSkills
- ADD:FEAT|Blind-Fight
- AUTO:FEAT|Blind Fight (x3)
- AUTO:FEAT|Weapon Focus(%LIST)
- AUTO:WEAPONPROF|%LIST
- CHOOSE:NUMCHOICES=1|WEAPONPROFICIENCY|DEITYWEAPON
- KEY:Charm (ES)
- SPELLS:Class|TIMES=1|Calm Emotions (x2)
- SPELLS:Class|TIMES=1|CASTERLEVEL=max(TL,1)|Speak with Animals,11+WIS
- SPELLS:Class|TIMES=1|CASTERLEVEL=TL|Comprehend Languages,11+WIS
- SPELLS:Innate|TIMES=1|CASTERLEVEL=1|Spells Test,20
- SPELLS:YourTest|TIMES=3|CASTERLEVEL=1|Same Spell Test
- TYPE:PFSLegal
- TYPE:TestDomain
- TYPE:TestDomainExtra (x2)
- VISION:Darkvision (60')
* JEP [0/0]
* weaponprof [0/1]
** TODO 1 failures
- TYPE:.CLEAR in bloodandblades_weaponprofs.lst
* questions
** when are JEPs used? [2/6]
- [ ] EVAL()
- [X] SELECT:
- [ ] QTY:
- [ ] LOOKUP:...,
- [ ] STAT:INT=...|
- [X] BONUS:<category>|<group>|<formula>
** how many starting pcc files are there?
* parsing lst types [7/18]
- [X] LANGUAGE (76/76)
- [X] SHIELDPROF (28/28)
- [X] WEAPONPROF (129/130)
- [X] ARMORPROF (50/50)
- [X] SKILL (134/139)
- [ ] COMPANIONMOD (block-based) (0/51)
- [ ] DEITY (block-based) (0/62)
- [X] DOMAIN (34/49)
- [ ] EQUIPMOD (0/115)
- [X] EQUIPMENT (131/709)
- [ ] SPELL (0/209)
- [ ] FEAT (0/347)
- [ ] RACE (0/281)
- [ ] KIT (block-based) (0/284)
- [ ] TEMPLATE (0/192)
- [ ] CLASS (block-based) (0/304)
- [ ] ABILITY (0/424)
- [ ] ABILITYCATEGORY (0/165)
* loading comment from pcgen-dev ml
The "load" process is - in practice - not much different than the
process used to compile software. (Preprocessing is the handling of
the PCC files and recursive calls to PCC:, compilation is handling the
.COPY, .MOD, and parsing the tokens. The symbol table is effectively
the data stored in the ReferenceContext, the other parts of the AST
are effectively the contents of ListContext and ObjectContext). Just
like a compiler has multiple passes over the internal representation,
so do we, as we have to resolve references back to the original
objects. (We effectively have 4 passes if you ignore the recursive PCC
file resolution)
